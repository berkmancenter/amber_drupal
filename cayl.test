<?php

class CAYLTestCase extends DrupalUnitTestCase {

  var $MOCK_METADATA = "/CAYL/cache/0a137b375cc3881a70e186ce2172c8d1 2014-03-23T15:57:05+00:00";

  public static function getInfo() {
    return array(
      'name' => 'CAYL unit tests',
      'description' => 'Test that link annotation is working properly',
      'group' => 'CAYL',
    );
  }

  /**
   * Set up the test environment, and load our mock CAYLStorage module
   */
  function setUp() {
    date_default_timezone_set('UTC');
    drupal_load('module', 'cayl');
    module_load_include('inc', 'cayl', 'cayl.extract');
    module_load_include('inc','cayl','tests/MockCAYLStatus');
    parent::setUp();
  }

  /**
   * Tear down the test environment.
   * Must clean our MockCAYLStorage class out of the cache
   */
  function tearDown() {
    drupal_static_reset("_cayl_lookup_url");
    parent::tearDown();
  }

  /**
   * Make sure that the Storage class is being called correctly
   */

  public function testCAYLLookup() {
    $result = _cayl_lookup_url("http://google.com");
    $this->assertTrue(is_array($result));
    $this->assertEqual($result['data-cache'],$this->MOCK_METADATA);
  }

  public function testpreprocess_link() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com', 'options' => array( 'attributes' => array()) );
    cayl_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertEqual($vars['options']['attributes']['data-cache'],$this->MOCK_METADATA);
  }

  public function testpreprocess_linkLocal() {
    $vars = array( 'text' => 'Test link', 'path' => 'node/1', 'options' => array( 'attributes' => array()) );
    cayl_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testpreprocess_linkOptionsNotSet() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com');
    cayl_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testpreprocess_linkExistingAttributes() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com', 'options' => array( 'attributes' => array('data-bogus' => 'Franky')) );
    cayl_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue($vars['options']['attributes']['data-cache'] == $this->MOCK_METADATA);
    $this->assertTrue($vars['options']['attributes']['data-bogus'] == "Franky");
  }

  public function testpreprocess_linkNoData() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://nodata.example.com',
      'options' => array('attributes' => array(),
                         'href' => 'http://nodata.example.com',
                          'title' => 'Test link',
                          'html' => FALSE,
      ));
    cayl_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testCAYLFilterEmpty() {
    $text = "";
    $result = _cayl_filter_process($text,null,null);
    $this->assertEqual($result,"");
  }

  public function testCAYLFilterSimpleReplaceSingleQuotes() {
    $text = "Hi there <a href='http://www.yahoo.com'>Yahoo</a>. Eat my donuts!";
    $result = _cayl_filter_process($text,null,null);
    $this->assertTrue(strpos($result,'data-cache') > 0);
  }

  public function testCAYLFilterSimpleReplaceDoubleQuotes() {
    $text = "Hi there <a href=\"http://www.yahoo.com\">Yahoo</a>. Eat my donuts!";
    $result = _cayl_filter_process($text,null,null);
    $this->assertTrue(strpos($result,'data-cache') > 0);
    $this->assertTrue(strpos($result,'data-cache') > 0);
  }

  public function testCAYLFilterSimpleNoReplace() {
    $text = "Hi there <a href='node/1'>node links</a>. Eat my meatloaf!";
    $result = _cayl_filter_process($text,null,null);
    $this->assertFalse(strpos($result,'data-cache'));
  }


  public function testCAYLLinkDetection1() {
    $body = <<<EOT
<!-- URL with uncommon chars that could potentially fail to extract. See http://drupal.org/node/465462. -->
<a href="http://www.lagrandeepicerie.fr/#e-boutique/Les_produits_du_moment,2/coffret_vins_doux_naturels,149">URL with uncommon chars</a>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quare ad ea primum, si videtur; Non quam nostram quidem, inquit Pomponius iocans; Sedulo, inquam, faciam. Zenonis est, inquam, hoc Stoici. Quis istud possit, inquit, negare? Duo Reges: constructio interrete. </p>
<p>Sed nimis multa. Non est ista, inquam, Piso, magna dissensio. Si longus, levis. Immo alio genere; Satis est ad hoc responsum. Quae sequuntur igitur? </p>
<a href="http://example.com/foo bar/is_valid-hack.test">URL with space</a>
<p>Tamen a proposito, inquam, aberramus. Quam si explicavisset, non tam haesitaret. Quamquam id quidem licebit iis existimare, qui legerint. Ut optime, secundum naturam affectum esse possit. Poterat autem inpune; Quamquam tu hanc copiosiorem etiam soles dicere. Quid, quod res alia tota est? At enim sequor utilitatem. </p>
<p>Sed ad illum redeo. Eam stabilem appellas. Audeo dicere, inquit. Si longus, levis; </p>
<a href="http://www.pancake.com">Pancjages</a>
EOT;

    $links = _cayl_extract_links($body);
    $this->assertEqual(count($links),3);
    $this->assertEqual($links[0],"http://www.lagrandeepicerie.fr/#e-boutique/Les_produits_du_moment,2/coffret_vins_doux_naturels,149");
    $this->assertEqual($links[1],"http://example.com/foo bar/is_valid-hack.test");
    $this->assertEqual($links[2],"http://www.pancake.com");
  }

  public function testCAYLLinkDetectionWithAttributesAndWonkyQuotes() {
    $body = <<<EOT

<a href="http://example.com" data-attribute="break me!">URL with uncommon chars</a>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quare ad ea primum, si videtur; Non quam nostram quidem, inquit Pomponius iocans; Sedulo, inquam, faciam. Zenonis est, inquam, hoc Stoici. Quis istud possit, inquit, negare? Duo Reges: constructio interrete. </p>
<p>Sed nimis multa. Non est ista, inquam, Piso, magna dissensio. Si longus, levis. Immo alio genere; Satis est ad hoc responsum. Quae sequuntur igitur? </p>
<a href='http://example.com/foo bar/is_valid-hack.test' alt='eatshorts.img'>URL with space</a>
<p>Tamen a proposito, inquam, aberramus. Quam si explicavisset, non tam haesitaret. Quamquam id quidem licebit iis existimare, qui legerint. Ut optime, secundum naturam affectum esse possit. Poterat autem inpune; Quamquam tu hanc copiosiorem etiam soles dicere. Quid, quod res alia tota est? At enim sequor utilitatem. </p>
<p>Sed ad illum redeo. Eam stabilem appellas. Audeo dicere, inquit. Si longus, levis; </p>
<a href='http://www.pancake.com' alt="something else">Pancjages</a>
<a href="http://www.waffles.com" alt='something else'>Pancjages</a>
EOT;

    $links = _cayl_extract_links($body);
    $this->assertEqual(count($links),4);
    $this->assertEqual($links[0],"http://example.com");
    $this->assertEqual($links[1],"http://example.com/foo bar/is_valid-hack.test");
    $this->assertEqual($links[2],"http://www.pancake.com");
    $this->assertEqual($links[3],"http://www.waffles.com");

  }

  public function testCAYLLinkFilter1() {
    $blacklist = array("yahoo.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _cayl_filter_links($links,$blacklist);
    $this->assertEqual(count($result),2);
    $this->assertEqual($result[0],"https://google.com");
  }

  public function testCAYLLinkFilter2() {
    $blacklist = array("yahoo.com","www.google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _cayl_filter_links($links,$blacklist);
    $this->assertEqual(count($result),2);
    $this->assertEqual($result[1],"http://www.peanuts.com/fruitcake");
  }

  public function testCAYLLinkFilter3() {
    $blacklist = array("yahoo.com","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _cayl_filter_links($links, $blacklist);
    $this->assertEqual(count($result),1);
    $this->assertEqual($result[0],"http://www.peanuts.com/fruitcake/www.yahoo.com");
  }

  public function testCAYLLinkFilter4() {
    $blacklist = array("yahoo.com ","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _cayl_filter_links($links, $blacklist);
    $this->assertEqual(count($result),1);
  }

}

class CAYLWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'CAYL Drupal tests',
      'description' => 'Test that integration with Drupal configuration is working properly',
      'group' => 'CAYLWeb',
    );
  }

  /**
   * Set up the test environment, and load our mock CAYLStorage module
   */
  function setUp() {
    drupal_load('module', 'cayl');
    module_load_include('inc','cayl','tests/MockCAYLStorage');
    parent::setUp();
  }

  /**
   * Tear down the test environment.
   * Must clean our MockCAYLStorage class out of the cache
   */
  function tearDown() {
    drupal_static_reset("_cayl_lookup_url");
    parent::tearDown();
  }

  public function testCAYLAddBehaviourUpPopup() {
    variable_set('cayl_available_action', CAYL_ACTION_POPUP);
    $result = _cayl_add_behavior(1);
    $this->assertEqual($result,"up popup");
  }

  public function testCAYLAddBehaviourUpHover() {
    variable_set('cayl_available_action', CAYL_ACTION_HOVER);
    variable_set('cayl_available_action_hover', 4);
    $result = _cayl_add_behavior(1);
    $this->assertEqual($result,"up hover:4");
  }

  public function testCAYLAddBehaviourUpNone() {
    variable_set('cayl_available_action', CAYL_ACTION_NONE);
    $result = _cayl_add_behavior(1);
    $this->assertNull($result);
  }

  public function testCAYLAddBehaviourDownHover() {
    variable_set('cayl_unavailable_action', CAYL_ACTION_HOVER);
    variable_set('cayl_available_action', CAYL_ACTION_POPUP);
    variable_set('cayl_unavailable_action_hover', 1);
    $result = _cayl_add_behavior(0);
    $this->assertEqual($result,"down hover:1");
  }

  public function testCAYLAddBehaviourDownCache() {
    variable_set('cayl_unavailable_action', CAYL_ACTION_CACHE);
    $result = _cayl_add_behavior(0);
    $this->assertEqual($result,"down cache");
  }


}
