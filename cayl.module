<?php

define("CAYL_ACTION_NONE",0);
define("CAYL_ACTION_HOVER",1);
define("CAYL_ACTION_POPUP",2);
define("CAYL_ACTION_CACHE",3);
define("CAYL_STATUS_UP","up");
define("CAYL_STATUS_DOWN","down");


/**
 * Implements hook_menu().
 */
function cayl_menu() {
  $items = array();
  $items['admin/config/cayl'] = array(
    'title' => 'CAYL Configuration',
    'description' => 'Configuration for the Cache As You Link module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cayl_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cayl.admin.inc',
  );
  $items['admin/reports/cayl'] = array(
    'title' => 'CAYL Dashboard',
    'description' => 'CAYL Dashboard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cayl_dashboard_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


function _cayl_add_behavior($status, $country = NULL) {
  $result = $status;
  if (is_null($country)) {
    if (CAYL_STATUS_UP == $status) {
      $action = variable_get('cayl_available_action', CAYL_ACTION_NONE);
      switch ($action) {
        case CAYL_ACTION_NONE:
          $result = NULL;
          break;
        case CAYL_ACTION_HOVER:
          $result .= " hover:" . variable_get('cayl_available_action_hover', 2);
          break;
        case CAYL_ACTION_POPUP:
          $result .= " popup";
          break;
        }
    } else if (CAYL_STATUS_DOWN == $status) {
      $action = variable_get('cayl_unavailable_action', CAYL_ACTION_NONE);
      switch ($action) {
        case CAYL_ACTION_NONE:
          $result = NULL;
          break;
        case CAYL_ACTION_HOVER:
          $result .= " hover:" . variable_get('cayl_unavailable_action_hover', 2);
          break;
        case CAYL_ACTION_POPUP:
          $result .= " popup";
          break;
        case CAYL_ACTION_CACHE:
          $result .= " cache";
          break;
        }
    }
  }
  return $result;
}


/**
 * Build the data- attributes to be added to the anchor tag, given saved metadata
 * @param $storage_metadata array dictionary from the CAYL Storage module
 * @return array attribute array to be added to the link
 */
function _cayl_build_link_attributes($storage_metadata) {
  $result = array();
  if (isset($storage_metadata['cache']['cayl']['location'],$storage_metadata['cache']['cayl']['date'])) {
    $result['data-cache'] = join(" ",array($storage_metadata['cache']['cayl']['location'],
                                           $storage_metadata['cache']['cayl']['date']));
  }
  if (isset($storage_metadata['status']['cayl']['default'])) {
    $behavior = _cayl_add_behavior($storage_metadata['status']['cayl']['default']);
    if ($behavior) {
      $result['data-cayl-behavior'] = $behavior;
    }
  }
  return $result;
}

/**
 * Lookup a URL using the CAYLStorage class, while caching for the duration of the page load
 */
function _cayl_lookup_url($url) {
  $storage = &drupal_static(__FUNCTION__);
  if (!isset($storage)) {
    $storage = new CAYLStorage();
  }
  return _cayl_build_link_attributes($storage->lookup_url($url));
}

/**
 * Implements hook_preprocess_link()
 *
 * Rewrite all cached external links with data-* attributes describing the information in the cache
 */
function cayl_preprocess_link(&$variables) {
  /* If it is an external link, check if cache exists, and add data-* attributes as necessary. */
  if (url_is_external($variables['path'])) {
    $attributes = _cayl_lookup_url($variables['path']);
    if (!empty($attributes)) {
      if (!isset($variables['options'])) {
        $variables['options'] = array();
      }
      if (isset($variables['options']['attributes']))
        $variables['options']['attributes'] += $attributes;
      else
        $variables['options']['attributes'] = $attributes;
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function cayl_filter_info() {
  $filters['filter_cayl'] = array(
    'title' => t('CAYL Filter'),
    'description' => t('Annotate all external links with information about the their local cached copies'),
    'process callback'  => '_cayl_filter_process',
    'tips callback' => '_cayl_filter_tips',
    'weight' => 50
  );
  return $filters;
}

/**
 * Callback function for updating href's with data-* attrbutes, after they've been identified with a regular expression
 * @param $matches
 * @return string
 */
function _cayl_filter_callback($matches) {
  $data = _cayl_lookup_url($matches[1]);
  $result = $matches[0];
  foreach ($data as $key => $value) {
    $result .= " $key=\"$value\"" ;
  }
  return $result;
}

/**
 * CAYL filter process callback.
 *
 * Find all external links and annotate then with data-* attributes describing the information in the cache.
 * Note: This treats all absolute URLs as external links.
 */
function _cayl_filter_process($text, $filter, $format) {
  $re = '/href=["\'](http[^\s()<>{}\[\]]+)[\'"]/';
  $text = preg_replace_callback($re, '_cayl_filter_callback', $text);
  return $text;
}


/**
 * Filter tips callback for CAYL filter.
 */
function _cayl_filter_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    // This string will be shown in the content add/edit form
    return t('Annotate all external links with information about the their local cached copies');
  }
  else {
    return t('Annotate all external links with information about the their local cached copies. Then add some more information about the CAYL project and links to other stuff.');
  }
}

