<?php

define("CAYL_ACTION_NONE",0);
define("CAYL_ACTION_HOVER",1);
define("CAYL_ACTION_POPUP",2);
define("CAYL_ACTION_CACHE",3);
define("CAYL_STATUS_UP","up");
define("CAYL_STATUS_DOWN","down");

define("CAYL_QUEUE_CACHE", "cayl_cache");
define("CAYL_QUEUE_CHECK_NEW", "cayl_check_new");
define("CAYL_QUEUE_CHECK_EXISTING","cayl_check_existing");

define("CAYL_VAR_LAST_CHECK_RUN","cayl_last_check_run");
define("CAYL_VAR_LAST_CACHE_RUN","cayl_last_cache_run");

module_load_include('inc', 'cayl', 'cayl.batch');

/**
 * Get an initialized CAYLStorage module
 * @return CAYLStorage
 */
function cayl_get_storage() {
  $storage = &drupal_static(__FUNCTION__);
  if (!isset($storage)) {
    $file_path = join(DIRECTORY_SEPARATOR,
      array(DRUPAL_ROOT, variable_get('cayl_storage_location', 'sites/default/files/cayl')));
    $storage = new CAYLStorage($file_path);
  }
  return $storage;
}

/**
 * Return an initialized CAYLFetcher module
 * @return ICAYLFetcher
 */
function cayl_get_fetcher() {
  $fetcher = &drupal_static(__FUNCTION__);
  if (!isset($fetcher)) {
    $fetcher = new CAYLFetcher(cayl_get_storage(), array(
      'cayl_max_file' => variable_get('cayl_max_file',1000),
      'header_text' => t("This is a cached page"),
    ));
  }
  return $fetcher;
}

/**
 * Return an initialized CAYLChecker module
 * @return ICAYLChecker
 */
function cayl_get_checker() {
  $checker = &drupal_static(__FUNCTION__);
  if (!isset($checker)) {
    $checker = new CAYLChecker();
  }
  return $checker;
}

/**
 * Return an initialized CAYLStatus module
 * @return ICAYLStatus
 */
function cayl_get_status() {
  $status = &drupal_static(__FUNCTION__);
  if (!isset($status)) {
    $db = Database::getConnection();
    $status = new CAYLStatus($db);
  }
  return $status;
}

/**
 * Implements hook_init()
 */
function cayl_init() {
  if (variable_get('cayl_enabled', 1)) {
    drupal_add_js(array(
      'cayl' => array(
        'name' => variable_get('site_name',t('This site')),
      )), 'setting');
  }
}


/**
 * Implements hook_menu().
 */
function cayl_menu() {
  $items = array();
  $items['admin/config/content/cayl'] = array(
    'title' => 'Cache As You Link',
    'description' => 'Configuration for the Cache As You Link module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cayl_config_form'),
    //TODO: Add permissions for CAYL functionality
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cayl.admin.inc',
  );
  $items['admin/reports/cayl'] = array(
    'title' => 'CAYL Dashboard',
    'description' => 'CAYL Dashboard',
    'file' => 'cayl.pages.inc',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('cayl_dashboard_summary_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/cayl/summary'] = array(
    'title' => 'Summary',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/reports/cayl/detail'] = array(
    'title' => 'Detail',
    'type' => MENU_LOCAL_TASK,
    'file' => 'cayl.pages.inc',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('cayl_dashboard_detail_form'),
    'access arguments' => array('access administration pages'),
    'weight' => 2,
  );
  $items['admin/reports/cayl/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete an item from the cache',
    'file' => 'cayl.pages.inc',
    'page callback' => array('cayl_dashboard_delete_item'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/cayl/blacklist'] = array(
    'title' => 'Exclude',
    'description' => 'Exclude a site from being cached',
    'file' => 'cayl.pages.inc',
    'page callback' => array('cayl_dashboard_blacklist_site'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  $items['cayl/cache'] = array(
    'title' => 'CAYL Cache',
    'description' => 'Retrieve items from the cache',
    'page callback' => 'cayl_retrieve_cache_item',
    'access callback' => true,
    'delivery callback' => 'cayl_deliver_cache_item',
    'type' => MENU_CALLBACK,
  );
  $items['cayl/cache/%/assets'] = array(
    'title' => 'CAYL Cache Assets',
    'description' => 'Retrieve assets related to an item from the cache',
    'page callback' => 'cayl_retrieve_cache_asset',
    'page arguments' => array(2),
    'access callback' => true,
    'delivery callback' => 'cayl_deliver_cache_item',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Figure out what behavior to set, based on the status of the page and the configuration settings
 * @param bool $status true if the site is up, false if the site is down
 * @param bool $country true if we should be using the country-specific behavior settings
 * @return null|string
 */
function _cayl_get_behavior($status, $country = false) {
  $result = $status ? "up" : "down";

  $c = $country ? "country_" : "";
  if ($status) {
    $action = variable_get("cayl_${c}available_action", CAYL_ACTION_NONE);
    switch ($action) {
      case CAYL_ACTION_NONE:
        $result = NULL;
        break;
      case CAYL_ACTION_HOVER:
        $result .= " hover:" . variable_get("cayl_${c}available_action_hover", 2);
        break;
      case CAYL_ACTION_POPUP:
        $result .= " popup";
        break;
      }
  } else {
    $action = variable_get("cayl_${c}unavailable_action", CAYL_ACTION_NONE);
    switch ($action) {
      case CAYL_ACTION_NONE:
        $result = NULL;
        break;
      case CAYL_ACTION_HOVER:
        $result .= " hover:" . variable_get("cayl_${c}unavailable_action_hover", 2);
        break;
      case CAYL_ACTION_POPUP:
        $result .= " popup";
        break;
      case CAYL_ACTION_CACHE:
        $result .= " cache";
        break;
      }
  }
  return $result;
}


/**
 * Build the data- attributes to be added to the anchor tag, given saved metadata
 * @param array $summaries array dictionary from the CAYL Status module
 * @return array attributes to be added to the link
 */
function _cayl_build_link_attributes($summaries) {
  $result = array();
  // Assume that we only have one cache of the data. This would need to change if we start tracking multiple caches
  if (isset($summaries['default']['location'],$summaries['default']['date'])) {
    $result['data-cache'] = join(" ",array(base_path() . $summaries['default']['location'], date('c',$summaries['default']['date'])));
  }

  $default_status = isset($summaries['default']['status']) ? $summaries['default']['status'] : null;
  // Add default behavior
  if (!is_null($default_status)) {
    $behavior = _cayl_get_behavior($default_status);
    if ($behavior) {
      $result['data-cayl-behavior'] = $behavior;
    }
  }

  // See if we have country-specific behavior
  if ($country = variable_get('cayl_country_id','')) {
    $country_status = isset($summaries[$country]['status']) ? $summaries[$country]['status'] : $default_status;
    if (!is_null($country_status)) {
      $country_behavior = _cayl_get_behavior($country_status, true);
      // Add country-specific behavior only if it is different than the default behavior
      if ($country_behavior && ($country_behavior != $result['data-cayl-behavior'])) {
        $result['data-cayl-behavior'] .= ",${country} ${country_behavior}";
      }
    }
  }

  return $result;
}

/**
 * Lookup a URL using the CAYLStorage class, while caching for the duration of the page load
 */
function _cayl_lookup_url($url) {
  $status = cayl_get_status();
  return _cayl_build_link_attributes($status->get_summary($url));
}

/**
 * Implements hook_preprocess_link()
 *
 * Rewrite all cached external links with data-* attributes describing the information in the cache
 */
function cayl_preprocess_link(&$variables) {
  /* If it is an external link, check if cache exists, and add data-* attributes as necessary. */
  if (variable_get('cayl_enabled', 1) && url_is_external($variables['path'])) {
    $attributes = _cayl_lookup_url($variables['path']);
    if (!empty($attributes)) {
      if (!isset($variables['options'])) {
        $variables['options'] = array();
      }
      if (isset($variables['options']['attributes']))
        $variables['options']['attributes'] += $attributes;
      else
        $variables['options']['attributes'] = $attributes;
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function cayl_filter_info() {
  $filters['filter_cayl'] = array(
    'title' => t('CAYL Filter'),
    'description' => t('Annotate all external links with information about the their local cached copies'),
    'process callback'  => '_cayl_filter_process',
    'tips callback' => '_cayl_filter_tips',
    'weight' => 50
  );
  return $filters;
}

/**
 * Callback function for updating href's with data-* attrbutes, after they've been identified with a regular expression
 * @param $matches
 * @return string
 */
function _cayl_filter_callback($matches) {
  $data = _cayl_lookup_url($matches[1]);
  $result = $matches[0];
  foreach ($data as $key => $value) {
    $result .= " $key=\"$value\"" ;
  }
  return $result;
}

/**
 * CAYL filter process callback.
 *
 * Find all external links and annotate then with data-* attributes describing the information in the cache.
 * Note: This treats all absolute URLs as external links.
 */
function _cayl_filter_process($text, $filter, $format) {
  if (variable_get('cayl_enabled', 1)) {
    $re = '/href=["\'](http[^\v()<>{}\[\]]+)[\'"]/';
    $text = preg_replace_callback($re, '_cayl_filter_callback', $text);
  }
  return $text;
}


/**
 * Filter tips callback for CAYL filter.
 */
function _cayl_filter_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    // This string will be shown in the content add/edit form
    return t('Annotate all external links with information about the their local cached copies');
  }
  else {
    //TODO: Get help content to display here
    return t('Annotate all external links with information about the their local cached copies. Then add some more information about the CAYL project and links to other stuff.');
  }
}

/**
 * Queue all links in the given node to be checked (which will lead them to be cached eventually if necessary)
 * @param $node object to scan for links to cache
 */
function cayl_cache_node($node) {
  module_load_include('inc', 'cayl', 'cayl.extract');
  $links = _cayl_extract_node_links($node);
  cayl_enqueue_check_links($links);
}

/**
 * Implements hook_entity_update
 */
function cayl_entity_update($entity, $type) {
  if ("node" == $type) {
    if (NODE_PUBLISHED == $entity->status) {
      cayl_cache_node($entity);
    }
  }
}

/**
 * Implements hook_entity_insert
 */
function cayl_entity_insert($entity, $type) {
  if ("node" == $type) {
    if (NODE_PUBLISHED == $entity->status) {
      cayl_cache_node($entity);
    }
  }
}

/**
 * Retrieve an item from the cache for display
 * @param $id string identifying the item to return
 * @return null|string
 */
function cayl_retrieve_cache_item($id) {
  $storage = cayl_get_storage();
  $data = $storage->get($id);
  $metadata = $storage->get_metadata($id);
  $status = cayl_get_status();
  $status->save_view($id);
  return ($data && $metadata) ? array('data' => $data, 'metadata' => $metadata) : MENU_NOT_FOUND;
}

/**
 * Retrieve an asset from the cache for display
 * @param $id string identifying the item to return
 * @return null|string
 */
function cayl_retrieve_cache_asset() {
  $args = func_get_args();
  $id = array_shift($args);
  $storage = cayl_get_storage();
  $d = $storage->get_asset($id, join('/',$args) . ($_SERVER['QUERY_STRING'] ? '?' . $_SERVER['QUERY_STRING'] : ''));
  if ($d) {
    $data['data'] = $d;
    // Set the mime-type correctly if this is a CSS file.
    if (substr($args[count($args) - 1],-3) == "css") {
      $data['metadata']['type'] = 'text/css';
    }
  }
  return (isset($data)) ? $data : MENU_NOT_FOUND;
}

/**
 * Display the data returned from the cache without any Drupal doodads
 * @param $data string or error code returned from cayl_retrieve_cache_item to be displayed
 */
function cayl_deliver_cache_item($data) {
  if (is_int($data) && $data == MENU_NOT_FOUND) {
    drupal_deliver_html_page(MENU_NOT_FOUND);
  } else {
    if (isset($data['metadata']['type'])) {
      drupal_add_http_header('Content-Type', $data['metadata']['type']);
    }
    //TODO: Tack the filename onto the end of the URL (either when rendering, or as a redirect, if non-HTML)
    print($data['data']);
  }
}

/**
 * Delete the contents of the cache
 */
function cayl_clear_cache() {
  $storage = cayl_get_storage();
  $storage->clear_cache();
  $status = cayl_get_status();
  $status->delete_all();
  foreach (array(CAYL_QUEUE_CACHE, CAYL_QUEUE_CHECK_EXISTING, CAYL_QUEUE_CHECK_NEW) as $queue_name) {
    $queue = DrupalQueue::get($queue_name);
    if ($queue) {
      $queue->deleteQueue();
    }
  }
}

function cayl_delete_item($id) {
  $storage = cayl_get_storage();
  $storage->clear_cache_item($id);
  $status = cayl_get_status();
  $status->delete($id);
  //TODO: Delete the item from the queue (if possible)
}

/**
 * Cache all nodes
 * @return number of nodes queued for caching
 */
function cayl_cache_all() {
  $count = 0;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1);
  $result = $query->execute();
  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $node = node_load($nid, NULL, TRUE);
      if ($node) {
        cayl_cache_node($node);
        $count++;
      }
    }
  }
  return $count;
}