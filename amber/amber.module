<?php

define("AMBER_ACTION_NONE",0);
define("AMBER_ACTION_HOVER",1);
define("AMBER_ACTION_POPUP",2);
define("AMBER_ACTION_CACHE",3);
define("AMBER_STATUS_UP","up");
define("AMBER_STATUS_DOWN","down");

define("AMBER_QUEUE_CACHE", "amber_cache");
define("AMBER_QUEUE_CHECK_NEW", "amber_check_new");
define("AMBER_QUEUE_CHECK_EXISTING","amber_check_existing");

define("AMBER_VAR_LAST_CHECK_RUN","amber_last_check_run");

module_load_include('inc', 'amber', 'amber.batch');

/**
 * Get an initialized AmberStorage module
 * @return AmberStorage
 */
function amber_get_storage() {
  $storage = &drupal_static(__FUNCTION__);
  if (!isset($storage)) {
    $file_path = join(DIRECTORY_SEPARATOR,
      array(DRUPAL_ROOT, variable_get('amber_storage_location', 'sites/default/files/amber')));
    $storage = new AmberStorage($file_path);
  }
  return $storage;
}

/**
 * Return an initialized AmberFetcher module
 * @return IAmberFetcher
 */
function amber_get_fetcher() {
  $fetcher = &drupal_static(__FUNCTION__);
  if (!isset($fetcher)) {
    $fetcher = new AmberFetcher(amber_get_storage(), array(
      'amber_max_file' => variable_get('amber_max_file',1000),
      'header_text' => t("You are viewing an archive of <a style='font-weight:bold !important; color:white !important' href='{{url}}'>{{url}}</a> created on {{date}}"),
      'excluded_content_types' => explode(PHP_EOL,variable_get("amber_excluded_formats","")),
    ));
  }
  return $fetcher;
}

/**
 * Return an initialized AmberChecker module
 * @return IAmberChecker
 */
function amber_get_checker() {
  $checker = &drupal_static(__FUNCTION__);
  if (!isset($checker)) {
    $checker = new AmberChecker();
  }
  return $checker;
}

/**
 * Return an initialized AmberStatus module
 * @return IAmberStatus
 */
function amber_get_status() {
  $status = &drupal_static(__FUNCTION__);
  if (!isset($status)) {
    $db = Database::getConnection();
    $status = new AmberStatus(new AmberPDO($db));
  }
  return $status;
}

/**
 * Implements hook_init()
 */
function amber_init() {
  if (variable_get('amber_enabled', 1)) {
    drupal_add_js(array(
      'amber' => array(
        'name' => variable_get('site_name',t('This site')),
      )), 'setting');
  }
}

/**
 *  Implements hook_permission()
**/
function amber_permission()
{
  return array('administer amber' => array(
      'title' => t('Administer Amber'),
      'description' => t('Adminster Amber storage and display of site captures'),
    )
  );  
}

/**
 * Implements hook_menu().
 */
function amber_menu() {
  $items = array();
  $items['admin/config/content/amber'] = array(
    'title' => 'Amber',
    'description' => 'Configuration for the Amber module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amber_config_form'),
    'access arguments' => array('administer amber'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'amber.admin.inc',
  );
  $items['admin/reports/amber'] = array(
    'title' => 'Amber Dashboard',
    'description' => 'Amber Dashboard',
    'file' => 'amber.pages.inc',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('amber_dashboard_summary_form'),
    'access arguments' => array('administer amber'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/amber/summary'] = array(
    'title' => 'Summary',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/reports/amber/detail'] = array(
    'title' => 'Detail',
    'type' => MENU_LOCAL_TASK,
    'file' => 'amber.pages.inc',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('amber_dashboard_detail_form'),
    'access arguments' => array('administer amber'),
    'weight' => 2,
  );
  $items['admin/reports/amber/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete a capture from storage',
    'file' => 'amber.pages.inc',
    'page callback' => array('amber_dashboard_delete_item'),
    'access arguments' => array('administer amber'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/reports/amber/blacklist'] = array(
    'title' => 'Exclude',
    'description' => 'Exclude a site from being cached',
    'file' => 'amber.pages.inc',
    'page callback' => array('amber_dashboard_blacklist_site'),
    'access arguments' => array('administer amber'),
    'type' => MENU_CALLBACK,
  );

  $items['amber/cache'] = array(
    'title' => 'Amber Cache',
    'description' => 'Retrieve items from the cache',
    'page callback' => 'amber_retrieve_cache_item',
    'access callback' => true,
    'delivery callback' => 'amber_deliver_cache_item',
    'type' => MENU_CALLBACK,
  );
  $items['amber/cache/%/assets'] = array(
    'title' => 'Amber Cache Assets',
    'description' => 'Retrieve assets related to an item from the cache',
    'page callback' => 'amber_retrieve_cache_asset',
    'page arguments' => array(2),
    'access callback' => true,
    'delivery callback' => 'amber_deliver_cache_item',
    'type' => MENU_CALLBACK,
  );
  $items['node/%/cache'] = array(
    'title' => 'Cache links now',
    'page callback' => 'amber_cache_node_now',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer amber'),
    'weight' => 20,
  );

  return $items;
}

/**
 * Figure out what behavior to set, based on the status of the page and the configuration settings
 * @param bool $status true if the site is up, false if the site is down
 * @param bool $country true if we should be using the country-specific behavior settings
 * @return null|string
 */
function _amber_get_behavior($status, $country = false) {
  $result = $status ? "up" : "down";

  $c = $country ? "country_" : "";
  if ($status) {
    $action = variable_get("amber_${c}available_action", AMBER_ACTION_NONE);
    switch ($action) {
      case AMBER_ACTION_NONE:
        $result = NULL;
        break;
      case AMBER_ACTION_HOVER:
        $result .= " hover:" . variable_get("amber_${c}available_action_hover", 2);
        break;
      case AMBER_ACTION_POPUP:
        $result .= " popup";
        break;
      }
  } else {
    $action = variable_get("amber_${c}unavailable_action", AMBER_ACTION_NONE);
    switch ($action) {
      case AMBER_ACTION_NONE:
        $result = NULL;
        break;
      case AMBER_ACTION_HOVER:
        $result .= " hover:" . variable_get("amber_${c}unavailable_action_hover", 2);
        break;
      case AMBER_ACTION_POPUP:
        $result .= " popup";
        break;
      case AMBER_ACTION_CACHE:
        $result .= " cache";
        break;
      }
  }
  return $result;
}


/**
 * Build the data- attributes to be added to the anchor tag, given saved metadata
 * @param array $summaries array dictionary from the Amber Status module
 * @return array attributes to be added to the link
 */
function _amber_build_link_attributes($summaries) {
  $result = array();
  // Assume that we only have one cache of the data. This would need to change if we start tracking multiple caches
  if (isset($summaries['default']['location'],$summaries['default']['date'],$summaries['default']['size']) &&
      ($summaries['default']['size'] > 0)) {
    $result['data-cache'] = join(" ",array(base_path() . $summaries['default']['location'], date('c',$summaries['default']['date'])));
  } else {
    return $result;
  }

  $default_status = isset($summaries['default']['status']) ? $summaries['default']['status'] : null;
  // Add default behavior
  if (!is_null($default_status)) {
    $behavior = _amber_get_behavior($default_status);
    if ($behavior) {
      $result['data-amber-behavior'] = $behavior;
    }
  }

  // See if we have country-specific behavior
  if ($country = variable_get('amber_country_id','')) {
    $country_status = isset($summaries[$country]['status']) ? $summaries[$country]['status'] : $default_status;
    if (!is_null($country_status)) {
      $country_behavior = _amber_get_behavior($country_status, true);
      // Add country-specific behavior only if it is different than the default behavior
      if ($country_behavior && ($country_behavior != $result['data-amber-behavior'])) {
        $result['data-amber-behavior'] .= ",${country} ${country_behavior}";
      }
    }
  }

  return $result;
}

/**
 * Lookup a URL using the AmberStorage class, while caching for the duration of the page load
 */
function _amber_lookup_url($url) {
  $status = amber_get_status();
  return _amber_build_link_attributes($status->get_summary($url));
}

/**
 * Implements hook_preprocess_link()
 *
 * Rewrite all cached external links with data-* attributes describing the information in the cache
 */
function amber_preprocess_link(&$variables) {
  /* If it is an external link, check if cache exists, and add data-* attributes as necessary. */
  if (variable_get('amber_enabled', 1) && url_is_external($variables['path'])) {
    $attributes = _amber_lookup_url($variables['path']);
    if (!empty($attributes)) {
      if (!isset($variables['options'])) {
        $variables['options'] = array();
      }
      if (isset($variables['options']['attributes']))
        $variables['options']['attributes'] += $attributes;
      else
        $variables['options']['attributes'] = $attributes;
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function amber_filter_info() {
  $filters['filter_amber'] = array(
    'title' => t('Amber Filter'),
    'description' => t('Annotate all external links with information about the their local cached copies'),
    'process callback'  => '_amber_filter_process',
    'tips callback' => '_amber_filter_tips',
    'weight' => 50
  );
  return $filters;
}

/**
 * Callback function for updating href's with data-* attrbutes, after they've been identified with a regular expression
 * @param $matches
 * @return string
 */
function _amber_filter_callback($matches) {
  $data = _amber_lookup_url($matches[1]);
  $result = $matches[0];
  foreach ($data as $key => $value) {
    $result .= " $key=\"$value\"" ;
  }
  return $result;
}

/**
 * Amber filter process callback.
 *
 * Find all external links and annotate then with data-* attributes describing the information in the cache.
 * Note: This treats all absolute URLs as external links.
 */
function _amber_filter_process($text, $filter, $format) {
  if (variable_get('amber_enabled', 1)) {
    $re = '/href=["\'](http[^\v()<>{}\[\]]+)[\'"]/i';
    $text = preg_replace_callback($re, '_amber_filter_callback', $text);
  }
  return $text;
}


/**
 * Filter tips callback for Amber filter.
 */
function _amber_filter_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    // This string will be shown in the content add/edit form
    return t('Annotate all external links with information about the their local cached copies');
  }
  else {
    //TODO: Get help content to display here
    return t('Annotate all external links with information about the their local cached copies. Then add some more information about the Amber project and links to other stuff.');
  }
}

/**
 * Menu callback hook for caching a page immediately
 */
function amber_cache_node_now($nid) {
  $node = node_load($nid);
  amber_cache_node($node,true);
  drupal_goto('node/' . $nid);
}

/**
 * Queue all links in the given node to be checked (which will lead them to be cached eventually if necessary),
 * or cache them immediately
 * @param $node object to scan for links to cache
 */
function amber_cache_node($node, $immediately = false) {
  module_load_include('inc', 'amber', 'amber.extract');
  $links = _amber_extract_node_links($node);
  if ($immediately) {
    foreach ($links['cache'] as $url) {
      if (amber_cache_link($url, $immediately)) {
        drupal_set_message(t("Sucessfully cached: @url.", array('@url' => $url)), 'status');
      } else {
        drupal_set_message(t("Could not cache: @url.", array('@url' => $url)), 'warning');
      }
    }      
    foreach ($links['excluded'] as $url) {
      drupal_set_message(t("Did not cache excluded site: @url.", array('@url' => $url)), 'warning');
    }
  } else {
    amber_enqueue_check_links($links);
  }
}

/**
 * Implements hook_entity_update
 */
function amber_entity_update($entity, $type) {
  if ("node" == $type) {
    if (NODE_PUBLISHED == $entity->status) {
      amber_cache_node($entity);
    }
  }
}

/**
 * Implements hook_entity_insert
 */
function amber_entity_insert($entity, $type) {
  if ("node" == $type) {
    if (NODE_PUBLISHED == $entity->status) {
      amber_cache_node($entity);
    }
  }
}

/**
 * Retrieve an item from the cache for display
 * @param $id string identifying the item to return
 * @return null|string
 */
function amber_retrieve_cache_item($id) {
  $storage = amber_get_storage();
  $data = $storage->get($id);
  $metadata = $storage->get_metadata($id);
  $status = amber_get_status();
  $status->save_view($id);
  return ($data && $metadata) ? array('data' => $data, 'metadata' => $metadata) : MENU_NOT_FOUND;
}

/**
 * Retrieve an asset from the cache for display
 * @param $id string identifying the item to return
 * @return null|string
 */
function amber_retrieve_cache_asset() {
  $args = func_get_args();
  $id = array_shift($args);
  $storage = amber_get_storage();
  $d = $storage->get_asset($id, join('/',$args) . ($_SERVER['QUERY_STRING'] ? '?' . $_SERVER['QUERY_STRING'] : ''));
  if ($d) {
    $data['data'] = $d;
    // Set the mime-type for certain files
    $last_element = $args[count($args) - 1];
    $extension = substr($last_element, strrpos($last_element, '.') + 1);
    switch ($extension) {
      case "css" : $data['metadata']['type'] = 'text/css'; break;
      case "jpg" : $data['metadata']['type'] = 'image/jpeg'; break;      
      case "png" : $data['metadata']['type'] = 'image/png'; break;      
      case "svg" : $data['metadata']['type'] = 'image/svg+xml'; break;      
      case "js" : $data['metadata']['type'] = 'application/javascript'; break;      
    }
  }
  return (isset($data)) ? $data : MENU_NOT_FOUND;
}

/**
 * Display the data returned from the cache without any Drupal doodads
 * @param $data string or error code returned from amber_retrieve_cache_item to be displayed
 */
function amber_deliver_cache_item($data) {
  if (is_int($data) && $data == MENU_NOT_FOUND) {
    drupal_deliver_html_page(MENU_NOT_FOUND);
  } else {
    if (isset($data['metadata']['type'])) {
      drupal_add_http_header('Content-Type', $data['metadata']['type']);
    }
    print($data['data']);
  }
}

/**
 * Delete the contents of the cache
 */
function amber_clear_cache() {
  $storage = amber_get_storage();
  $storage->clear_cache();
  $status = amber_get_status();
  $status->delete_all();
  foreach (array(AMBER_QUEUE_CACHE, AMBER_QUEUE_CHECK_EXISTING, AMBER_QUEUE_CHECK_NEW) as $queue_name) {
    $queue = DrupalQueue::get($queue_name);
    if ($queue) {
      $queue->deleteQueue();
    }
  }
  db_delete('queue')->condition('data', '%amber_batch_cache_process%', 'LIKE')->execute();
}

function amber_delete_item($id) {
  $storage = amber_get_storage();
  $storage->clear_cache_item($id);
  $status = amber_get_status();
  $status->delete($id);
  //TODO: Delete the item from the queue (if possible)
}

/**
 * Cache all nodes
 * @return number of nodes queued for caching
 */
function amber_cache_all() {
  $count = 0;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1);
  $result = $query->execute();
  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $node = node_load($nid, NULL, TRUE);
      if ($node) {
        amber_cache_node($node);
        $count++;
      }
    }
  }
  return $count;
}
