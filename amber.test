<?php

class AmberTestCase extends DrupalUnitTestCase {

  var $MOCK_METADATA_CACHE = "http://amber.org/Amber/cache/0a137b375cc3881a70e186ce2172c8d1";
  var $MOCK_METADATA_DATE = "2014-03-23T15:57:05+00:00";

  public static function getInfo() {
    return array(
      'name' => 'Amber unit tests',
      'description' => 'Test that link annotation is working properly',
      'group' => 'Amber',
    );
  }

  /**
   * Set up the test environment, and load our mock AmberStorage module
   */
  function setUp() {
    date_default_timezone_set('UTC');
    drupal_load('module', 'amber');
    module_load_include('inc', 'amber', 'amber.extract');
    module_load_include('inc','amber','tests/MockAmberStatus');
    global $_SERVER;
    $_SERVER['SERVER_NAME'] = "amber.org";
    parent::setUp();
  }

  /**
   * Tear down the test environment.
   * Must clean our MockAmberStorage class out of the cache
   */
  function tearDown() {
    drupal_static_reset("_amber_lookup_url");
    parent::tearDown();
  }

  /**
   * Make sure that the Storage class is being called correctly
   */

  public function testAmberLookup() {
    $result = _amber_lookup_url("http://google.com");
    $this->assertTrue(is_array($result));
    $this->assertEqual($result['data-versionurl'],$this->MOCK_METADATA_CACHE);
    $this->assertEqual($result['data-versiondate'],$this->MOCK_METADATA_DATE);
  }

  public function testpreprocess_link() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com', 'options' => array( 'attributes' => array()) );
    amber_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertEqual($vars['options']['attributes']['data-versionurl'],$this->MOCK_METADATA_CACHE);
    $this->assertEqual($vars['options']['attributes']['data-versiondate'],$this->MOCK_METADATA_DATE);
  }

  public function testpreprocess_linkLocal() {
    $vars = array( 'text' => 'Test link', 'path' => 'node/1', 'options' => array( 'attributes' => array()) );
    amber_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testpreprocess_linkOptionsNotSet() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com');
    amber_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testpreprocess_linkExistingAttributes() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://www.google.com', 'options' => array( 'attributes' => array('data-bogus' => 'Franky')) );
    amber_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue($vars['options']['attributes']['data-versionurl'] == $this->MOCK_METADATA_CACHE);
    $this->assertTrue($vars['options']['attributes']['data-versiondate'] == $this->MOCK_METADATA_DATE);
    $this->assertTrue($vars['options']['attributes']['data-bogus'] == "Franky");
  }

  public function testpreprocess_linkNoData() {
    $vars = array( 'text' => 'Test link', 'path' => 'http://nodata.example.com',
      'options' => array('attributes' => array(),
                         'href' => 'http://nodata.example.com',
                          'title' => 'Test link',
                          'html' => FALSE,
      ));
    amber_preprocess_link($vars);
    $this->assertTrue($vars['text']);
    $this->assertTrue(empty($var['options']['attributes']));
  }

  public function testAmberFilterEmpty() {
    $text = "";
    $result = _amber_filter_process($text,null,null);
    $this->assertEqual($result,"");
  }

  public function testAmberFilterSimpleReplaceSingleQuotes() {
    $text = "Hi there <a href='http://www.yahoo.com'>Yahoo</a>. Eat my donuts!";
    $result = _amber_filter_process($text,null,null);
    $this->assertTrue(strpos($result,'data-versionurl') > 0);
  }

  public function testAmberFilterSimpleReplaceDoubleQuotes() {
    $text = "Hi there <a href=\"http://www.yahoo.com\">Yahoo</a>. Eat my donuts!";
    $result = _amber_filter_process($text,null,null);
    $this->assertTrue(strpos($result,'data-versionurl') > 0);
    $this->assertTrue(strpos($result,'data-versionurl') > 0);
  }

  public function testAmberFilterSimpleNoReplace() {
    $text = "Hi there <a href='node/1'>node links</a>. Eat my meatloaf!";
    $result = _amber_filter_process($text,null,null);
    $this->assertFalse(strpos($result,'data-versionurl'));
  }


  public function testAmberLinkDetection1() {
    $body = <<<EOT
<!-- URL with uncommon chars that could potentially fail to extract. See http://drupal.org/node/465462. -->
<a href="http://www.lagrandeepicerie.fr/#e-boutique/Les_produits_du_moment,2/coffret_vins_doux_naturels,149">URL with uncommon chars</a>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quare ad ea primum, si videtur; Non quam nostram quidem, inquit Pomponius iocans; Sedulo, inquam, faciam. Zenonis est, inquam, hoc Stoici. Quis istud possit, inquit, negare? Duo Reges: constructio interrete. </p>
<p>Sed nimis multa. Non est ista, inquam, Piso, magna dissensio. Si longus, levis. Immo alio genere; Satis est ad hoc responsum. Quae sequuntur igitur? </p>
<a href="http://example.com/foo bar/is_valid-hack.test">URL with space</a>
<p>Tamen a proposito, inquam, aberramus. Quam si explicavisset, non tam haesitaret. Quamquam id quidem licebit iis existimare, qui legerint. Ut optime, secundum naturam affectum esse possit. Poterat autem inpune; Quamquam tu hanc copiosiorem etiam soles dicere. Quid, quod res alia tota est? At enim sequor utilitatem. </p>
<p>Sed ad illum redeo. Eam stabilem appellas. Audeo dicere, inquit. Si longus, levis; </p>
<a href="http://www.pancake.com">Pancjages</a>
EOT;

    $links = _amber_extract_links($body);
    $this->assertEqual(count($links),3);
    $this->assertEqual($links[0],"http://www.lagrandeepicerie.fr/#e-boutique/Les_produits_du_moment,2/coffret_vins_doux_naturels,149");
    $this->assertEqual($links[1],"http://example.com/foo bar/is_valid-hack.test");
    $this->assertEqual($links[2],"http://www.pancake.com");
  }

  public function testAmberLinkDetectionWithAttributesAndWonkyQuotes() {
    $body = <<<EOT

<a href="http://example.com" data-attribute="break me!">URL with uncommon chars</a>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quare ad ea primum, si videtur; Non quam nostram quidem, inquit Pomponius iocans; Sedulo, inquam, faciam. Zenonis est, inquam, hoc Stoici. Quis istud possit, inquit, negare? Duo Reges: constructio interrete. </p>
<p>Sed nimis multa. Non est ista, inquam, Piso, magna dissensio. Si longus, levis. Immo alio genere; Satis est ad hoc responsum. Quae sequuntur igitur? </p>
<a href='http://example.com/foo bar/is_valid-hack.test' alt='eatshorts.img'>URL with space</a>
<p>Tamen a proposito, inquam, aberramus. Quam si explicavisset, non tam haesitaret. Quamquam id quidem licebit iis existimare, qui legerint. Ut optime, secundum naturam affectum esse possit. Poterat autem inpune; Quamquam tu hanc copiosiorem etiam soles dicere. Quid, quod res alia tota est? At enim sequor utilitatem. </p>
<p>Sed ad illum redeo. Eam stabilem appellas. Audeo dicere, inquit. Si longus, levis; </p>
<a href='http://www.pancake.com' alt="something else">Pancjages</a>
<a href="http://www.waffles.com" alt='something else'>Pancjages</a>
EOT;

    $links = _amber_extract_links($body);
    $this->assertEqual(count($links),4);
    $this->assertEqual($links[0],"http://example.com");
    $this->assertEqual($links[1],"http://example.com/foo bar/is_valid-hack.test");
    $this->assertEqual($links[2],"http://www.pancake.com");
    $this->assertEqual($links[3],"http://www.waffles.com");

  }

  public function testAmberLinkFilter1() {
    $blacklist = array("yahoo.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _amber_filter_links($links,$blacklist);
    $this->assertEqual(count($result['cache']),3);
    $this->assertEqual($result['cache'][1],"https://google.com");
  }

  public function testAmberLinkFilter2() {
    $blacklist = array("yahoo.com","www.google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _amber_filter_links($links,$blacklist);
    $this->assertEqual(count($result['cache']),3);
    $this->assertEqual($result['cache'][1],"https://google.com");
  }

  public function testAmberLinkFilter3() {
    $blacklist = array("yahoo.com","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _amber_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),2);
    $this->assertEqual($result['cache'][0],"http://www.yahoo.com");
  }

  public function testAmberLinkFilter4() {
    $blacklist = array("yahoo.com ","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _amber_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),2);
  }

  public function testAmberRegexpLinkFilter1() {
    $blacklist = array("yahoo.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _amber_regexp_filter_links($links,$blacklist);
    $this->assertEqual(count($result['cache']),2);
    $this->assertEqual(count($result['excluded']),2);
    $this->assertEqual($result['cache'][0],"https://google.com");
  }

  public function testAmberRegexpLinkFilter2() {
    $blacklist = array("yahoo.com","www.google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake");
    $result = _amber_regexp_filter_links($links,$blacklist);
    $this->assertEqual(count($result['cache']),2);
    $this->assertEqual($result['cache'][0],"https://google.com");
  }

  public function testAmberRegexpLinkFilter3() {
    $blacklist = array("yahoo.com","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _amber_regexp_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),0);
  }

  public function testAmberRegexpLinkFilter4() {
    $blacklist = array("yahoo.com ","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.peanuts.com/fruitcake/www.yahoo.com");
    $result = _amber_regexp_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),0);
  }

  public function testAmberRegexpLinkFilter5() {
    $blacklist = array("yahoo.com$","google.com");
    $links = array("http://www.yahoo.com", "https://google.com", "http://yahoo.com", "http://www.yahoo.com/fruitcake/");
    $result = _amber_regexp_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),1);
    $this->assertEqual($result['cache'][0],"http://www.yahoo.com/fruitcake/");
  }

  public function testAmberRegexpLinkFilter6() {
    $blacklist = array("com/exclude");
    $links = array("http://www.yahoo.com", "https://google.com/exclude/blah", "http://yahoo.com/exclude-me", "http://www.yahoo.com/fruitcake/");
    $result = _amber_regexp_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),2);
    $this->assertEqual($result['cache'][0],"http://www.yahoo.com");
  }

  public function testAmberRegexpLinkFilter7() {
    $blacklist = array("com/exclude", "");
    $links = array("http://www.yahoo.com", "https://google.com/exclude/blah", "http://yahoo.com/exclude-me", "http://www.yahoo.com/fruitcake/");
    $result = _amber_regexp_filter_links($links, $blacklist);
    $this->assertEqual(count($result['cache']),2);
    $this->assertEqual($result['cache'][0],"http://www.yahoo.com");
  }

  public function testAmberRegexpLinkFilterInvalidExpression() {
    $blacklist = array("*google.com");
    $links = array("http://www.yahoo.com");
    $default_error_logging_level = error_reporting();
    error_reporting(E_ALL ^ E_WARNING);
    $result = _amber_regexp_filter_links($links, $blacklist);
    error_reporting($default_error_logging_level);
    $this->assertEqual(count($result['cache']),1);
    $this->assertEqual($result['cache'][0],"http://www.yahoo.com");
  }

}

class AmberWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Amber Drupal tests',
      'description' => 'Test that integration with Drupal configuration is working properly',
      'group' => 'AmberWeb',
    );
  }

  /**
   * Set up the test environment, and load our mock AmberStorage module
   */
  function setUp() {
    drupal_load('module', 'amber');
    module_load_include('inc','amber','tests/MockAmberStorage');
    global $_SERVER;
    $_SERVER['SERVER_NAME'] = "amber.org";
    parent::setUp();
  }

  /**
   * Tear down the test environment.
   * Must clean our MockAmberStorage class out of the cache
   */
  function tearDown() {
    drupal_static_reset("_amber_lookup_url");
    parent::tearDown();
  }

  public function testAmberAddBehaviourUpPopup() {
    variable_set('amber_available_action', AMBER_ACTION_POPUP);
    $result = _amber_get_behavior(1);
    $this->assertEqual($result,"up popup");
  }

  public function testAmberAddBehaviourUpHover() {
    variable_set('amber_available_action', AMBER_ACTION_HOVER);
    variable_set('amber_available_action_hover', 4);
    $result = _amber_get_behavior(1);
    $this->assertEqual($result,"up hover:4");
  }

  public function testAmberAddBehaviourUpNone() {
    variable_set('amber_available_action', AMBER_ACTION_NONE);
    $result = _amber_get_behavior(1);
    $this->assertNull($result);
  }

  public function testAmberAddBehaviourDownHover() {
    variable_set('amber_unavailable_action', AMBER_ACTION_HOVER);
    variable_set('amber_available_action', AMBER_ACTION_POPUP);
    variable_set('amber_unavailable_action_hover', 1);
    $result = _amber_get_behavior(0);
    $this->assertEqual($result,"down hover:1");
  }

  public function testAmberAddBehaviourDownCache() {
    variable_set('amber_unavailable_action', AMBER_ACTION_CACHE);
    $result = _amber_get_behavior(0);
    $this->assertEqual($result,"down cache");
  }

  public function testAmberFilterDisabled() {
    variable_set('amber_enabled', 0);
    $text = "Hi there <a href='http://www.yahoo.com'>node links</a>. Eat my meatloaf!";
    $result = _amber_filter_process($text,null,null);
    $this->assertFalse(strpos($result,'data-versionurl'));
  }

  public function testAmberAddCountryBehaviourDownCache() {
    variable_set('amber_country_unavailable_action', AMBER_ACTION_CACHE);
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    $result = _amber_get_behavior(0);
    $this->assertEqual($result,"down popup");
    $result = _amber_get_behavior(0,true);
    $this->assertEqual($result,"down cache");
  }

  public function testAmberAttributeAddingSimple() {
    $basic = array(
      'default' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0)
    );
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    $result = _amber_build_link_attributes($basic);
    $this->assertEqual($result['data-amber-behavior'],"down popup");
  }

  public function testAmberAttributeAddingCountry() {
    $basic = array(
      'default' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0),
      'us' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 1)
    );
    variable_set('amber_country_id', 'us');
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    variable_set('amber_country_available_action', AMBER_ACTION_HOVER);
    variable_set('amber_country_available_action_hover', 2);
    $result = _amber_build_link_attributes($basic);
    $this->assertEqual($result['data-amber-behavior'],"down popup,us up hover:2");
  }

  public function testAmberAttributeAddingCountryPopupCache() {
    $basic = array(
      'default' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0),
      'us' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0)
    );
    variable_set('amber_country_id', 'us');
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    variable_set('amber_country_unavailable_action', AMBER_ACTION_CACHE);
    $result = _amber_build_link_attributes($basic);
    $this->assertEqual($result['data-amber-behavior'],"down popup,us down cache");
  }


  public function testAmberAttributeAddingCountryIgnoreIfSameAsDefault() {
    $basic = array(
      'default' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0),
      'us' => array(
        'location' => '/cache/here',
        'date' => 1395590225,
        'size' => 3453,
        'status' => 0)
    );
    variable_set('amber_country_id', 'us');
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    variable_set('amber_country_unavailable_action', AMBER_ACTION_POPUP);
    $result = _amber_build_link_attributes($basic);
    $this->assertEqual($result['data-amber-behavior'],"down popup");
  }

  public function testAmberAttributeAddingAbsoluteURL() {
    $basic = array(
      'default' => array(
        'location' => 'http://example.com/cache/here',
        'date' => 1395590225,
        'size' => 0,
        'status' => 0)
    );
    variable_set('amber_unavailable_action', AMBER_ACTION_POPUP);
    $result = _amber_build_link_attributes($basic);
    $this->assertEqual($result['data-amber-behavior'],"down popup");
    $this->assertEqual($result['data-versionurl'],"http://example.com/cache/here");
  }



}
